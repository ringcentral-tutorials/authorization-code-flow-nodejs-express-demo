(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("mocha"), require("chai"), require("sinon"), require("sinon-chai"), require("../ringcentral"));
	else if(typeof define === 'function' && define.amd)
		define([, "chai", "sinon", "sinon-chai", "../ringcentral"], factory);
	else if(typeof exports === 'object')
		exports["SDK"] = factory(require("mocha"), require("chai"), require("sinon"), require("sinon-chai"), require("../ringcentral"));
	else
		root["RingCentral"] = root["RingCentral"] || {}, root["RingCentral"]["SDK"] = factory(root[undefined], root["chai"], root["sinon"], root[undefined], root["RingCentral"]["SDK"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(2);


/***/ },
/* 1 */
/***/ function(module, exports) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var iteratorSymbol =
    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    // This invoke function is written in a style that assumes some
    // calling function (or Promise) will handle exceptions.
    function invoke(method, arg) {
      var result = generator[method](arg);
      var value = result.value;
      return value instanceof AwaitArgument
        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
        : Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            return result;
          });
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var invokeNext = invoke.bind(generator, "next");
    var invokeThrow = invoke.bind(generator, "throw");
    var invokeReturn = invoke.bind(generator, "return");
    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return invoke(method, arg);
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : new Promise(function (resolve) {
          resolve(callInvokeWithMethodAndArg());
        });
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context._sent = arg;

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            context.sent = undefined;
          }
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var context = __webpack_require__(3);
context.keys().forEach(context);
module.exports = context;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

var map = {
	"./SDK-spec.js": 4,
	"./core/Cache-spec.js": 11,
	"./core/Observable-spec.js": 12,
	"./core/Queue-spec.js": 13,
	"./core/Utils-spec.js": 14,
	"./http/ApiResponse-spec.js": 15,
	"./http/Client-spec.js": 16,
	"./platform/Platform-spec.js": 17,
	"./subscription/CachedSubscription-spec.js": 18,
	"./subscription/Subscription-spec.js": 19
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 3;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

describe('RingCentral', function () {
    var test = function () {
        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(suite, server, done) {
            var sdk, response;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:

                            suite.timeout(10000); // Per SLA should be 3 seconds

                            sdk = new _SDK2.default({ server: server, appKey: '', appSecret: '' });
                            _context.prev = 2;
                            _context.next = 5;
                            return sdk.platform().get('', null, { skipAuthCheck: true });

                        case 5:
                            response = _context.sent;


                            (0, _test.expect)(response.json().uri).to.equal(server + '/restapi/v1.0');

                            sdk.cache().clean();

                            _context.next = 13;
                            break;

                        case 10:
                            _context.prev = 10;
                            _context.t0 = _context['catch'](2);
                            throw _context.t0;

                        case 13:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[2, 10]]);
        }));

        return function test(_x, _x2, _x3) {
            return ref.apply(this, arguments);
        };
    }();

    it.skip('connects to sandbox', function () {
        return test(this, _SDK2.default.server.sandbox);
    });

    it('connects to production', function () {
        return test(this, _SDK2.default.server.production);
    });
});

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

exports.__esModule = true;
exports.getMock = exports.spy = exports.expect = exports.sinon = exports.chai = undefined;

var getMock = exports.getMock = function () {
    var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fn) {
        var sdk, clean, platofrm, res;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        clean = function clean() {
                            sdk.cache().clean();
                            client.registry().clear();
                        };

                        sdk = getSdk();
                        _context.prev = 2;


                        getRegistry().authentication();

                        platofrm = sdk.platform();
                        _context.next = 7;
                        return platofrm.login({
                            username: 'whatever',
                            password: 'whatever'
                        });

                    case 7:
                        _context.next = 9;
                        return fn(sdk);

                    case 9:
                        res = _context.sent;


                        clean();

                        return _context.abrupt('return', res);

                    case 14:
                        _context.prev = 14;
                        _context.t0 = _context['catch'](2);

                        clean();
                        throw _context.t0;

                    case 18:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this, [[2, 14]]);
    }));

    return function getMock(_x) {
        return ref.apply(this, arguments);
    };
}();

exports.getRegistry = getRegistry;
exports.getSdk = getSdk;
exports.asyncTest = asyncTest;

var _mocha2 = __webpack_require__(6);

var _mocha3 = _interopRequireDefault(_mocha2);

var _chai2 = __webpack_require__(7);

var _chai3 = _interopRequireDefault(_chai2);

var _sinon2 = __webpack_require__(8);

var _sinon3 = _interopRequireDefault(_sinon2);

var _sinonChai2 = __webpack_require__(9);

var _sinonChai3 = _interopRequireDefault(_sinonChai2);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var chai = exports.chai = _chai3.default || window.chai;
var sinon = exports.sinon = _sinon3.default || window.sinon;
var expect = exports.expect = chai.expect;
var spy = exports.spy = sinon.spy;

var client = new _SDK2.default.mocks.Client();
var pubnub = new _SDK2.default.pubnub.PubnubMockFactory();

// Alter default settings
_SDK2.default.platform.Platform._refreshDelayMs = 1;
_SDK2.default.core.Queue._pollInterval = 1;
_SDK2.default.core.Queue._releaseTimeout = 50;
_SDK2.default.subscription.Subscription._pollInterval = 1;

function getRegistry() {
    return client.registry();
}

/**
 * @return {SDK}
 */
function getSdk() {

    return new _SDK2.default({
        server: 'http://whatever',
        appKey: 'whatever',
        appSecret: 'whatever',
        client: client,
        pubnubFactory: pubnub
    });
}

function asyncTest(fn) {

    return function () {
        return getMock(fn);
    };
}

/***/ },
/* 6 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ },
/* 7 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ },
/* 8 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ },
/* 9 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ },
/* 10 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_10__;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.core.Cache', function () {

    var Cache = _SDK2.default.core.Cache;

    describe('getItem', function () {

        it('returns a previously set item', function () {

            var cache = new Cache({ 'rc-foo': '"bar"' });

            (0, _test.expect)(cache.getItem('foo')).to.equal('bar');
        });

        it('returns null if item not found', function () {

            var cache = new Cache({});

            (0, _test.expect)(cache.getItem('foo')).to.equal(null);
        });
    });

    describe('setItem', function () {

        it('sets an item in storage', function () {

            var cache = new Cache({});

            (0, _test.expect)(cache.setItem('foo', { foo: 'bar' }).getItem('foo')).to.deep.equal({ foo: 'bar' });
        });
    });
});

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.core.Observable', function () {

    var Observable = _SDK2.default.core.Observable;

    describe('Regular events', function () {

        it('binds and fires events', function () {

            var o = new Observable(),
                a = 0;

            o.on('event', function () {
                a++;
            });

            o.emit('event');
            (0, _test.expect)(a).to.be.equal(1);

            o.emit('event');
            (0, _test.expect)(a).to.be.equal(2);
        });

        it('binds and unbinds events', function () {

            var o = new Observable(),
                a = 0,
                c = function c() {
                a++;
            };

            o.on('event', c);
            o.off('event', c);

            o.emit('event');
            (0, _test.expect)(a).to.be.equal(0);
        });

        it('don\'t share events', function () {

            var o1 = new Observable(),
                o2 = new Observable(),
                a = 0,
                c = function c() {
                a++;
            };

            o1.on('event', c);
            o2.on('event', c);

            o1.emit('event');
            o2.emit('event');

            (0, _test.expect)(a).to.be.equal(2);
        });
    });
});

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.core.Queue', function () {

    var pollInterval = _SDK2.default.core.Queue._pollInterval,
        releaseTimeout = _SDK2.default.core.Queue._releaseTimeout;

    function getQueue() {
        return new _SDK2.default.core.Queue(new _SDK2.default.core.Cache({}), 'foo');
    }

    describe('poll', function () {

        it('resumes after timeout if not resumed before', function (done) {

            getQueue().pause().poll().then(function () {
                done();
            }).catch(done);
        });

        it('can be resumed externally before timeout', function (done) {

            var queue = getQueue(),
                flag = false;

            queue.pause().poll().then(function () {
                (0, _test.expect)(flag).to.equal(true);
                done();
            });

            setTimeout(function () {
                flag = true;
                queue.resume();
            }, releaseTimeout / 2);
        });
    });
});

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.core.Utils', function () {

    var utils = _SDK2.default.core.Utils;

    describe('parseQueryString & queryStringify', function () {

        it('parses queryStrings', function () {

            (0, _test.expect)(utils.parseQueryString('foo=bar&bar=baz')).to.deep.equal({ foo: 'bar', bar: 'baz' });
            (0, _test.expect)(utils.parseQueryString('foo=bar&foo=baz')).to.deep.equal({ foo: ['bar', 'baz'] });
            (0, _test.expect)(utils.parseQueryString('foo')).to.deep.equal({ foo: true });
        });

        it('builds queryStrings', function () {

            (0, _test.expect)(utils.queryStringify({ foo: 'bar', bar: 'baz' })).to.equal('foo=bar&bar=baz');
            (0, _test.expect)(utils.queryStringify({ foo: ['bar', 'baz'] })).to.equal('foo=bar&foo=baz');
        });

        it('decodes pre-encoded string representation of object to be equal to original object', function () {

            function encodeDecode(v) {
                return utils.parseQueryString(utils.queryStringify(v));
            }

            var simple = { foo: 'bar' },
                array = { foo: ['bar', 'baz'] };

            (0, _test.expect)(encodeDecode(simple)).to.deep.equal(simple);
            (0, _test.expect)(encodeDecode(array)).to.deep.equal(array);
        });
    });

    describe('poll & stopPolling', function () {

        it('allows to set custom delay', function (done) {

            utils.poll(function (next, delay) {

                (0, _test.expect)(delay).to.equal(10);
                done();
            }, 10);
        });

        it('provides a method to do it continuously', function (done) {

            var i = 0;

            utils.poll(function (next) {

                i++;

                if (i < 3) next();else done();
            }, 1);

            after(function () {

                (0, _test.expect)(i).to.equal(3);
            });
        });

        it('provides a method stop', function (done) {

            var timeout = utils.poll(function (next) {

                done(new Error('This should never be reached'));
            }, 10);

            utils.stopPolling(timeout);

            done();
        });

        it('cancels a previous timeout if provided', function (done) {

            var timeout = utils.poll(function (next) {

                done(new Error('This should never be reached'));
            }, 10);

            var timeout2 = utils.poll(function (next) {

                done();
            }, 10, timeout);
        });
    });
});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.http.ApiResponse', function () {

    var ApiResponse = _SDK2.default.http.ApiResponse;

    function createResponse(status, statusText, body, headers) {
        if (!headers) headers = jsonResponseHeaders;
        body = headers.trim() + '\n\n' + body;
        return ApiResponse.create(body, status, statusText);
    }

    var goodMultipartMixedResponse = '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\r\n' + '\r\n' + '{\n' + '  "response" : [ {\n' + '    "status" : 200\n' + '  }, {\n' + '    "status" : 200\n' + '  } ]\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "foo" : "bar"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "baz" : "qux"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248--\n',
        multipartMixedResponseWithErrorPart = '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "response" : [ {\n' + '    "status" : 200\n' + '  }, {\n' + '    "status" : 404\n' + '  }, {\n' + '    "status" : 200\n' + '  } ]\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "foo" : "bar"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "message" : "object not found"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "baz" : "qux"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248--\n',
        badMultipartMixedResponse = '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + 'THIS IS JUNK AND CANNOT BE PARSED AS JSON\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "foo" : "bar"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "baz" : "qux"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248--\n',
        multipartResponseHeaders = 'content-type: multipart/mixed; boundary=Boundary_1245_945802293_1394135045248',
        jsonResponseHeaders = 'content-type: application/json; encoding=utf8';

    describe('constructor tests', function () {

        it('parses headers into object', function () {

            (0, _test.expect)(createResponse(200, 'OK', '{}', jsonResponseHeaders)['_isJson']()).to.equal(true);
            (0, _test.expect)(createResponse(207, 'Multi-Status', '{}', multipartResponseHeaders)['_isMultipart']()).to.equal(true);
        });

        it('calls the success callback after parsing a good multi-part/mixed response', function () {

            var response = createResponse(207, 'Multi-Status', goodMultipartMixedResponse, multipartResponseHeaders);

            (0, _test.expect)(function () {
                response.multipart();
            }).to.not.throw(Error);
        });

        it('calls the success callback for all individual parts that are parsed (including errors)', function () {

            var res = createResponse(207, 'Multi-Status', multipartMixedResponseWithErrorPart, multipartResponseHeaders);
            (0, _test.expect)(res.text()).to.equal(multipartMixedResponseWithErrorPart);

            var multipart = res.multipart();

            (0, _test.expect)(multipart.length).to.equal(3);

            //expect(res.data[0]).to.be.instanceOf(r.Response); //FIXME
            (0, _test.expect)(multipart[0].error()).to.be.equal(null);
            (0, _test.expect)(multipart[0].json().foo).to.be.equal('bar');
            (0, _test.expect)(multipart[0].response().status).to.be.equal(200);

            //expect(res.data[1]).to.be.instanceOf(r.Response); //FIXME
            (0, _test.expect)(multipart[1].error()).to.be.not.equal(null);

            //expect(res.data[2]).to.be.instanceOf(r.Response); //FIXME
            (0, _test.expect)(multipart[2].error()).to.be.equal(null);
            (0, _test.expect)(multipart[2].json().baz).to.be.equal('qux');
            (0, _test.expect)(multipart[2].response().status).to.be.equal(200);
        });

        it('calls the error callback if it fails to parse the parts info block', function () {

            var response = createResponse(207, 'Multi-Status', badMultipartMixedResponse, multipartResponseHeaders);

            (0, _test.expect)(function () {
                response.multipart();
            }).to.throw(Error);
        });

        it('calls the error callback if it is unable to parse the JSON data, passing the error object', function () {

            var response = createResponse(200, 'OK', 'THIS IS JUNK', jsonResponseHeaders);

            (0, _test.expect)(function () {
                response.json();
            }).to.throw(Error);
        });

        it('uses the error_description property of the JSON data when there is an error but no message property', function () {

            var response = createResponse(404, 'Error', '{"error_description": "ERROR"}', jsonResponseHeaders);

            (0, _test.expect)(response.error()).to.equal('ERROR');
        });

        it('uses the description property of the JSON data when there is an error but no message or error_description properties', function () {

            var response = createResponse(404, 'Error', '{"description": "ERROR"}', jsonResponseHeaders);

            (0, _test.expect)(response.error()).to.equal('ERROR');
        });

        it('parses empty response', function () {

            var response = createResponse(204, 'No Content', '', jsonResponseHeaders);

            (0, _test.expect)(response.error()).to.equal(null);
            (0, _test.expect)(response.json()).to.equal(null);
        });
    });
});

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

describe('RingCentral.http.Client', function () {

    var Client = _SDK2.default.http.Client;

    function getClient(cb) {

        var client = new Client();

        // hijack into private property to bypass any fetch-related stuff
        client['_loadResponse'] = cb ? cb : _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            throw new Error('No resolver provided for _loadResponse');

                        case 1:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        return client;
    }

    describe('createRequest', function () {

        it('sets default headers & properties', function () {

            var request = getClient().createRequest({ url: 'http://foo/bar' });

            (0, _test.expect)(request.headers.get('Content-Type')).to.equal('application/json');
            (0, _test.expect)(request.headers.get('Accept')).to.equal('application/json');

            (0, _test.expect)(request.url).to.equal('http://foo/bar');
            (0, _test.expect)(request.method).to.equal('GET');
        });

        it('validates the method', function () {

            (0, _test.expect)(function () {
                getClient().createRequest({ url: 'http://foo/bar', method: 'foo' });
            }).to.throw(Error);
        });
    });
});

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

describe('RingCentral.platform.Platform', function () {

    describe('setCredentials', function () {

        it('should have predefined apiKey', function () {

            (0, _test.expect)((0, _test.getSdk)().platform()['_apiKey']()).to.equal('d2hhdGV2ZXI6d2hhdGV2ZXI='); // whatever:whatever
        });
    });

    describe('setServer', function () {

        it('should have predefined server', function () {

            (0, _test.expect)((0, _test.getSdk)().platform()['_server']).to.equal('http://whatever');
        });
    });

    describe('isTokenValid', function () {

        it('is not authenticated when token has expired', function () {

            var sdk = (0, _test.getSdk)(),
                platform = sdk.platform();

            platform.auth().cancelAccessToken();

            (0, _test.expect)(platform.auth().accessTokenValid()).to.equal(false);
        });

        it('is not authenticated after logout', (0, _test.asyncTest)(function () {
            var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(sdk) {
                var platform;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:

                                (0, _test.getRegistry)().logout();

                                platform = sdk.platform();
                                _context.next = 4;
                                return platform.logout();

                            case 4:

                                (0, _test.expect)(platform.auth().accessTokenValid()).to.equal(false);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return ref.apply(this, arguments);
            };
        }()));

        it('is not authenticated if paused', function () {

            var sdk = (0, _test.getSdk)(),
                platform = sdk.platform(),
                queue = platform['_queue'];

            queue.pause();
            (0, _test.expect)(platform.auth().accessTokenValid()).to.equal(false);
            queue.resume();
        });
    });

    describe('authorized', function () {

        it('initiates refresh if not authorized', (0, _test.asyncTest)(function () {
            var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(sdk) {
                var platform;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:

                                (0, _test.getRegistry)().tokenRefresh();

                                platform = sdk.platform();


                                (0, _test.expect)(platform.auth().accessToken()).to.not.equal('ACCESS_TOKEN_FROM_REFRESH');

                                platform.auth().cancelAccessToken();

                                _context2.next = 6;
                                return platform.loggedIn();

                            case 6:

                                (0, _test.expect)(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return ref.apply(this, arguments);
            };
        }()));

        it('waits for refresh to resolve from other tab', function () {

            return (0, _test.getMock)(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform(),
                    token = 'ACCESS_TOKEN_FROM_OTHER_TAB';

                (0, _test.expect)(platform.auth().accessToken()).to.not.equal(token);

                queue.pause();

                setTimeout(function () {

                    platform.auth().setData({
                        access_token: token,
                        expires_in: 60 * 60 // 1 hour
                    });

                    queue.resume();
                }, 10);

                platform.auth().cancelAccessToken();

                return platform.loggedIn().then(function () {
                    (0, _test.expect)(platform.auth().accessToken()).to.equal(token);
                });
            });
        });

        it('produces error if refresh did not happen', (0, _test.asyncTest)(function () {
            var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(sdk) {
                var queue, platform, res;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                queue = sdk.platform()['_queue'], platform = sdk.platform();


                                queue.pause();

                                platform.auth().cancelAccessToken();

                                _context3.next = 5;
                                return platform.loggedIn();

                            case 5:
                                res = _context3.sent;

                                (0, _test.expect)(res).to.equal(false);

                            case 7:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return ref.apply(this, arguments);
            };
        }()));
    });

    describe('sendRequest', function () {

        it('refreshes token when token was expired', function () {

            return (0, _test.getMock)(function (sdk) {

                var platform = sdk.platform(),
                    path = '/restapi/xxx',
                    refreshSpy = (0, _test.spy)(function () {});

                (0, _test.getRegistry)().tokenRefresh().apiCall('GET', path, {});

                (0, _test.expect)(platform.auth().accessToken()).to.not.equal('ACCESS_TOKEN_FROM_REFRESH');

                platform.auth().cancelAccessToken();

                return platform.on(platform.events.refreshSuccess, refreshSpy).get(path).then(function (ajax) {
                    (0, _test.expect)(refreshSpy).to.be.calledOnce;
                    (0, _test.expect)(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');
                });
            });
        });

        it('tries to refresh the token if Platform returns 401 Unauthorized and re-executes the request', (0, _test.asyncTest)(function () {
            var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(sdk) {
                var platform, path, refreshSpy, response, res;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                platform = sdk.platform(), path = '/restapi/xxx', refreshSpy = (0, _test.spy)(function () {}), response = { foo: 'bar' };


                                (0, _test.getRegistry)().apiCall('GET', path, { message: 'time not in sync' }, 401, 'Time Not In Sync').tokenRefresh().apiCall('GET', path, response, 200);

                                platform.on(platform.events.refreshSuccess, refreshSpy);

                                _context4.next = 5;
                                return platform.get(path);

                            case 5:
                                res = _context4.sent;


                                (0, _test.expect)(refreshSpy).to.be.calledOnce;
                                (0, _test.expect)(res.json()).to.deep.equal(response);
                                (0, _test.expect)(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');

                            case 9:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return ref.apply(this, arguments);
            };
        }()));

        it('fails if ajax has status other than 2xx', function () {

            return (0, _test.getMock)(function (sdk) {

                var platform = sdk.platform(),
                    path = '/restapi/xxx';

                (0, _test.getRegistry)().apiCall('GET', path, { description: 'Fail' }, 400, 'Bad Request');

                return platform.get(path).then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('Fail');
                });
            });
        });
    });

    describe('refresh', function () {

        it('handles error in queued AJAX after unsuccessful refresh when token is killed', function () {

            return (0, _test.getMock)(function (sdk) {

                var platform = sdk.platform(),
                    path = '/restapi/xxx',
                    successSpy = (0, _test.spy)(function () {}),
                    errorSpy = (0, _test.spy)(function () {});

                (0, _test.getRegistry)().tokenRefresh(true).apiCall('GET', path, {});

                platform.auth().cancelAccessToken();

                return platform.on(platform.events.refreshSuccess, successSpy).on(platform.events.refreshError, errorSpy).get(path).then(function () {
                    throw new Error('This should never be called');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('Wrong token');
                    (0, _test.expect)(errorSpy).to.be.calledOnce;
                    (0, _test.expect)(successSpy).not.to.calledOnce;
                });
            });
        });

        it('sits and waits for the queue to be released, no matter how many pending refreshes there are', function () {

            return (0, _test.getMock)(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                queue.pause();

                setTimeout(function () {
                    queue.resume();
                }, 5);

                return Promise.all([platform.refresh(), platform.refresh(), platform.refresh()]);
            });
        });

        it('handles subsequent refreshes', function () {

            return (0, _test.getMock)(function (sdk) {

                var platform = sdk.platform();

                (0, _test.getRegistry)().tokenRefresh().tokenRefresh().tokenRefresh();

                return platform.refresh() // first
                .then(function () {
                    return platform.refresh(); // second
                }).then(function () {
                    return Promise.all([platform.refresh(), // third combined for two
                    platform.refresh()]);
                });
            });
        });

        it('returns error if response is malformed', function () {

            return (0, _test.getMock)(function (sdk) {

                var platform = sdk.platform();

                (0, _test.getRegistry)().apiCall('POST', '/restapi/oauth/token', {
                    'message': 'Wrong token',
                    'error_description': 'Wrong token',
                    'description': 'Wrong token'
                }, 240); // This weird status was caught on client's machine

                platform.auth().cancelAccessToken();

                return platform.refresh().then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.originalMessage).to.equal('Malformed OAuth response');
                    (0, _test.expect)(e.message).to.equal('Wrong token');
                });
            });
        });

        it('issues only one refresh request', function () {

            return (0, _test.getMock)(function (sdk) {

                (0, _test.getRegistry)().tokenRefresh().apiCall('GET', '/restapi/v1.0/foo', { increment: 1 }).apiCall('GET', '/restapi/v1.0/foo', { increment: 2 }).apiCall('GET', '/restapi/v1.0/foo', { increment: 3 });

                var platform = sdk.platform();

                platform.auth().cancelAccessToken();

                return Promise.all([platform.get('/foo'), platform.get('/foo'), platform.get('/foo')]).then(function (res) {
                    return res.map(function (r) {
                        return r.json();
                    });
                }).then(function (res) {
                    (0, _test.expect)(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');
                    (0, _test.expect)(res[0].increment).to.equal(1);
                    (0, _test.expect)(res[1].increment).to.equal(2);
                    (0, _test.expect)(res[2].increment).to.equal(3);
                });
            });
        });

        it('immediately (synchronously) pauses', function () {

            return (0, _test.getMock)(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                (0, _test.getRegistry)().tokenRefresh();

                var refresh = platform.refresh();

                (0, _test.expect)(queue.isPaused()).to.equal(true);

                return refresh;
            });
        });

        it('throws error if queue was unpaused before refresh call', function () {

            return (0, _test.getMock)(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                (0, _test.getRegistry)().tokenRefresh();

                var refresh = platform.refresh();

                queue.resume();

                return refresh.then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('Queue was resumed before refresh call');
                });
            });
        });
    });

    describe('refreshPolling', function () {

        it('polls the status of semaphor and resumes operation', function () {

            return (0, _test.getMock)(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                queue.pause();

                setTimeout(function () {
                    queue.resume();
                }, 10);

                return platform.refresh();
            });
        });

        it('resolves with error if token is not valid after releaseTimeout', function () {

            return (0, _test.getMock)(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                queue.pause(); // resume() will not be called in this test

                platform.auth().cancelAccessToken();

                return platform.refresh().then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('Automatic authentification timeout');
                });
            });
        });
    });

    describe('get, post, put, delete', function () {

        it('sends request using appropriate method', function () {

            return (0, _test.getMock)(function (sdk) {

                var platform = sdk.platform();

                function test(method) {

                    var path = '/foo/' + method;

                    (0, _test.getRegistry)().apiCall(method, path, { foo: 'bar' });

                    return platform[method](path).then(function (res) {
                        (0, _test.expect)(res.request().method).to.equal(method.toUpperCase());
                        (0, _test.expect)(res.json().foo).to.equal('bar');
                        return res;
                    });
                }

                return Promise.all([test('get'), test('post'), test('put'), test('delete')]);
            });
        });
    });

    describe('apiUrl', function () {

        it('builds the URL', function () {

            var platform = (0, _test.getSdk)().platform();

            (0, _test.expect)(platform.createUrl('/foo')).to.equal('/restapi/v1.0/foo');

            (0, _test.expect)(platform.createUrl('/foo', { addServer: true })).to.equal('http://whatever/restapi/v1.0/foo');

            (0, _test.expect)(platform.createUrl('/foo', {
                addServer: true,
                addToken: true
            })).to.equal('http://whatever/restapi/v1.0/foo?access_token=');

            (0, _test.expect)(platform.createUrl('/foo?bar', {
                addServer: true,
                addToken: true
            })).to.equal('http://whatever/restapi/v1.0/foo?bar&access_token=');

            (0, _test.expect)(platform.createUrl('/foo?bar', {
                addServer: true,
                addToken: true,
                addMethod: 'POST'
            })).to.equal('http://whatever/restapi/v1.0/foo?bar&_method=POST&access_token=');
        });
    });

    //TODO Add tests for this
    describe.skip('parseAuthRedirectUrl', function () {});
    describe.skip('getAuthURL', function () {});
});

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.subscription.CachedSubscription', function () {

    describe('restore', function () {

        it.skip('sets appropriate event filters if subscription is not alive', function () {});
        it.skip('sets appropriate event filters if subscription is never existed', function () {});
        it.skip('renews subscription if cache data is OK', function () {});
        it.skip('re-subscribes with default event filters when renew fails', function () {});
    });

    describe('renew', function () {});

    describe('resubscribe', function () {});
});

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var _test = __webpack_require__(5);

var _SDK = __webpack_require__(10);

var _SDK2 = _interopRequireDefault(_SDK);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RingCentral.subscription.Subscription', function () {

    var expiresIn = _SDK2.default.subscription.Subscription._renewHandicapMs * 2;

    describe('subscribe', function () {

        it('automatically renews subscription', function () {

            return (0, _test.getMock)(function (sdk) {

                var subscription = sdk.createSubscription();

                (0, _test.getRegistry)().subscribeGeneric(expiresIn);

                return subscription.setEventFilters(['foo', 'bar']).register().then(function (res) {
                    (0, _test.expect)(res.json().expiresIn).to.equal(expiresIn);
                });
            });
        });
    });

    describe('notify', function () {

        it('fires a notification event when the notify method is called and passes the message object', function () {

            return (0, _test.getMock)(function (sdk) {

                return new Promise(function (resolve) {

                    var subscription = sdk.createSubscription();

                    subscription.setSubscription({
                        id: 'foo',
                        expirationTime: new Date(Date.now() + expiresIn).toISOString(),
                        deliveryMode: {
                            subscriberKey: 'foo',
                            address: 'foo'
                        }
                    });

                    subscription.on(subscription.events.notification, function (event) {
                        (0, _test.expect)(event).to.deep.equal({ foo: 'bar' });
                        resolve();
                    });

                    subscription['_notify']({ foo: 'bar' }); // using private API
                });
            });
        });
    });

    describe('renew', function () {

        it('fails when no subscription', function () {

            return (0, _test.getMock)(function (sdk) {

                return sdk.createSubscription().renew().then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('No subscription');
                });
            });
        });

        it('fails when no eventFilters', function () {

            return (0, _test.getMock)(function (sdk) {

                var subscription = sdk.createSubscription();

                subscription.setSubscription({
                    id: 'foo',
                    expirationTime: new Date(Date.now() + expiresIn).toISOString(),
                    deliveryMode: {
                        subscriberKey: 'foo',
                        address: 'foo'
                    }
                });

                return subscription.renew().then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('Events are undefined');
                });
            });
        });

        it.skip('automatically renews when subscription is going to expire');
    });

    describe('subscribe', function () {

        it('fails when no eventFilters', function () {

            return (0, _test.getMock)(function (sdk) {

                return sdk.createSubscription().subscribe().then(function () {
                    throw new Error('This should not be reached');
                }).catch(function (e) {
                    (0, _test.expect)(e.message).to.equal('Events are undefined');
                });
            });
        });

        it('calls the success callback and passes the subscription provided from the platform', function () {

            return (0, _test.getMock)(function (sdk) {

                var event = 'foo',
                    subscription = sdk.createSubscription();

                (0, _test.getRegistry)().subscribeGeneric();

                return subscription.setEventFilters([event]).subscribe().then(function () {
                    (0, _test.expect)(subscription.subscription().eventFilters.length).to.equal(1);
                });
            });
        });

        it('calls the error callback and passes the error provided from the platform', function () {

            return (0, _test.getMock)(function (sdk) {

                var subscription = sdk.createSubscription();

                (0, _test.getRegistry)().apiCall('POST', '/restapi/v1.0/subscription', { 'message': 'Subscription failed' }, 400, 'Bad Request');

                return subscription.setEventFilters(['foo']).subscribe().then(function () {
                    throw new Error('This should never be reached');
                }).catch(function (e) {

                    (0, _test.expect)(e.message).to.equal('Subscription failed');
                    (0, _test.expect)(e).to.be.an.instanceOf(Error);
                });
            });
        });
    });

    describe('decrypt', function () {

        it('decrypts AES-encrypted messages when the subscription has an encryption key', function () {

            var subscription = (0, _test.getSdk)().createSubscription().setSubscription({
                id: 'foo',
                expirationTime: new Date(Date.now() + expiresIn).toISOString(),
                deliveryMode: {
                    encryptionKey: 'e0bMTqmumPfFUbwzppkSbA==',
                    subscriberKey: 'foo',
                    address: 'foo'
                }
            }),
                aesMessage = 'gkw8EU4G1SDVa2/hrlv6+0ViIxB7N1i1z5MU/Hu2xkIKzH6yQzhr3vIc27IAN558kTOkacqE5DkLpRdnN1orwtI' + 'BsUHmPMkMWTOLDzVr6eRk+2Gcj2Wft7ZKrCD+FCXlKYIoa98tUD2xvoYnRwxiE2QaNywl8UtjaqpTk1+WDImBrt' + '6uabB1WICY/qE0It3DqQ6vdUWISoTfjb+vT5h9kfZxWYUP4ykN2UtUW1biqCjj1Rb6GWGnTx6jPqF77ud0XgV1r' + 'k/Q6heSFZWV/GP23/iytDPK1HGJoJqXPx7ErQU=';

            (0, _test.expect)(subscription['_decrypt'](aesMessage)).to.deep.equal({
                "timestamp": "2014-03-12T20:47:54.712+0000",
                "body": {
                    "extensionId": 402853446008,
                    "telephonyStatus": "OnHold"
                },
                "event": "/restapi/v1.0/account/~/extension/402853446008/presence",
                "uuid": "db01e7de-5f3c-4ee5-ab72-f8bd3b77e308"
            });
        });
    });
});

/***/ }
/******/ ])
});
;
//# sourceMappingURL=ringcentral-tests.js.map